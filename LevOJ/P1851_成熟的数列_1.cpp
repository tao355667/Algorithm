/*
P1851 成熟的数列
====关键词===================================================
1.暴力，查找一个数是否在数列中
2.下标根据数列的构造规则跳跃
3.看到查询次数很多，考虑哈希表
4.经过试验，发现这是个斐波那契数列，返回的下标为2的n次方
（如找15，是下标为2，则返回2^(2-1)
找29，下标为4，返回2^(3-1)）
h[15]=2（哈希表，数列中表示下标为2的数据为15）
h[29]=4
h[44]=8
h[73]=16
h[117]=32
h[190]=64
h[307]=128
h[497]=256
h[804]=512
一直超时，把cout改为printf，减少函数使用
运行时错误，应该是数组空间太大(约400MB)了
改用STL map存储哈希表，AC了
====关键词===================================================
====题目===================================================

====题目===================================================
*/
#include <iostream>
#include <map>
#include <cstdio>
#include <cmath>
const int N = 1000005;
// const int M = 100000005;
using namespace std;
int a[N];
map<int, int> h; //哈希表
int Z;           //数列的项数
int n, p;        //咨询次数,要查找的数字

int main()
{
    scanf("%d%d%d", &a[0], &a[1], &Z);
    h[a[0]] = 0;
    h[a[1]] = 1;
    //构造数列
    int i = 2;
    int j = 2;
    while (i < Z)
    {
        a[j] = a[j - 1] + a[j - 2];
        h[a[j]] = i; //构造哈希表
        // printf("a[%d]=%d\n", j, a[j]);
        // printf("h[%d]=%d\n", a[j], i);
        i *= 2;
        j++;
    }
    //查找
    scanf("%d", &n);
    while (n--)
    {
        scanf("%d", &p);
        if (a[0] == p)
        {
            printf("0\n");
            continue;
        }
        if (h[p])
        {
            printf("%d\n", h[p]);
            continue;
        }
        printf("-1\n");
    }
    return 0;
}