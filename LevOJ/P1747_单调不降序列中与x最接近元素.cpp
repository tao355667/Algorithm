/*
P1747 单调不降序列中与x最接近元素
====关键词===================================================
1.二分查找
====关键词===================================================
====题目===================================================
题目描述
在一个非降序列序列中与给定值 t 最接近的元素
输入描述
第一行包含一个整数 n，为非降序列长度 (1<=n<=100 000)
第 2 行包含 n 个整数，为非降序列的各个元素， 所有元素的大小均在 0~1 000 000 000 范围内。
第 3 行包含一个整数 m， 为要询问的给定值的个数 (1<=m<=10 000)。接下来 m 行，每行一个整数， 为要询问最接近元素的给定值，所有给定值的大小均在 0~1 000 000 000 范围内。
输出描述
输出共 m 行，每行一个整数，为最接近相应给定值的元素值，并保持输入顺序。若有多个元素值满足条件，输出最小的一个。
输入样例
3
2 5 8
2
10
5
输出样例
8
5
====题目===================================================
*/
#include <iostream>
#include <cmath>
using namespace std;
const int N = 100010;
int a[N];
int n, m, ee; //共多少元素，要找几个，要找的元素
//二分查找
int binary_search(int e)
{

    int l = 1, r = n;
    int mid = (l + r) / 2;
    if (a[l] == e)
        return a[l];
    if (a[r] == e)
        return a[r];
    while (l < r - 1)
    {
        mid = (l + r) / 2;
        if (a[mid] == e)//加入这个，减少时间
            return a[mid];
        if (a[mid] > e)
            r = mid;
        else
            l = mid;
    }
    if (e - a[l] <= a[r] - e)
        return a[l]; //优先返回较小的一个
    else
        return a[r];
}
int main()
{
    //读数&题解
    cin >> n;
    for (int i = 1; i <= n; i++)
    {
        cin >> a[i];
    }
    cin >> m;
    while (m--)
    {
        cin >> ee;
        cout << binary_search(ee) << endl;
    }
    //输出结果
    return 0;
}